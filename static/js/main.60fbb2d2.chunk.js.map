{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MoviesList","state","moviesList","searchTerm","search","event","preventDefault","axios","get","then","res","data","Search","map","movie","imdbID","setState","handleChange","target","value","this","onSubmit","placeholder","onChange","type","className","length","movieID","key","React","Component","MovieCard","movieData","props","Title","Released","Genre","Plot","Poster","imdbRating","style","backgroundImage","substr","split","g","App","Brand","id","Toggle","Collapse","Text","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUAMMA,E,2MACFC,MAAQ,CACJC,WAAY,CAAC,aACbC,WAAY,I,EAGhBC,OAAS,SAAAC,GACLA,EAAMC,iBACNC,IACKC,IADL,qDAGY,EAAKP,MAAME,WAHvB,eAMKM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAC,GACF,GAAKA,EAAIE,OAAT,CAKA,IAAMV,EAAaQ,EAAIE,OAAOC,IAAI,SAAAC,GAAK,OAAIA,EAAMC,SACjD,EAAKC,SAAS,CACVd,oBANA,EAAKc,SAAS,CAAEd,WAAY,Q,EAW5Ce,aAAe,SAAAZ,GACX,EAAKW,SAAS,CACVb,WAAYE,EAAMa,OAAOC,S,wEAIvB,IACEjB,EAAekB,KAAKnB,MAApBC,WAER,OACI,6BACI,0BAAMmB,SAAUD,KAAKhB,QACjB,2BACIkB,YAAY,qBACZC,SAAUH,KAAKH,eAEnB,4BAAQO,KAAK,UACT,uBAAGC,UAAU,mBAGpBvB,EAAWwB,OAAS,EACjBxB,EAAWW,IAAI,SAAAC,GAAK,OAChB,kBAAC,EAAD,CAAWa,QAASb,EAAOc,IAAKd,MAGpC,+G,GArDKe,IAAMC,WA+DzBC,E,2MACF9B,MAAQ,CACJ+B,UAAW,I,mFAGM,IAAD,OAChBzB,IACKC,IADL,qDAGYY,KAAKa,MAAMN,QAHvB,eAMKlB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAC,GACF,EAAKM,SAAS,CAAEgB,UAAWtB,Q,+BAI7B,IAAD,EAQDU,KAAKnB,MAAM+B,UANXE,EAFC,EAEDA,MACAC,EAHC,EAGDA,SACAC,EAJC,EAIDA,MACAC,EALC,EAKDA,KACAC,EANC,EAMDA,OACAC,EAPC,EAODA,WAGJ,OAAKD,GAAqB,QAAXA,EAKX,yBAAKb,UAAU,wBACX,yBAAKA,UAAU,mBACX,yBACIA,UAAU,WACVe,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAT,SAGhC,yBAAKb,UAAU,cACX,6CACA,6BACI,4BAAKS,GACL,iDAAuBC,IAE3B,uCAAaI,EAAb,SACA,2BAAIF,GAAQA,EAAKK,OAAO,EAAG,MAC3B,yBAAKjB,UAAU,kBACVW,GAASA,EAAMO,MAAM,MAAM9B,IAAI,SAAA+B,GAAC,OAAI,8BAAOA,QApBjD,S,GA7BKf,IAAMC,WAsFfe,E,iLAzBb,OACC,yBAAKpB,UAAU,OACd,kBAAC,IAAD,KACY,kBAAC,IAAOqB,MAAR,KAAc,wBAAIC,GAAG,QAAP,qBACxB,kBAAC,IAAOC,OAAR,MACA,kBAAC,IAAOC,SAAR,CAAiBxB,UAAU,uBAC1B,kBAAC,IAAOyB,KAAR,KACE,wBAAIH,GAAG,WAAU,uBAAGI,MAAM,eAA1B,mBAA2D,uBAAGA,MAAM,yBAMzE,kBAAC,EAAD,MACF,gCACA,uD,GAnBgBtB,IAAMC,WClHJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtD,KAAK,SAAAuD,GACjCA,EAAaC,iB","file":"static/js/main.60fbb2d2.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport Navbar from 'react-bootstrap/Navbar'\n\nclass MoviesList extends React.Component {\n    state = {\n        moviesList: ['tt3896198'],\n        searchTerm: ''\n    };\n\n    search = event => {\n        event.preventDefault();\n        axios\n            .get(\n                `https://www.omdbapi.com/?apikey=fa281222&s=${\n                    this.state.searchTerm\n                }&plot=full`\n            )\n            .then(res => res.data)\n            .then(res => {\n                if (!res.Search) {\n                    this.setState({ moviesList: [] });\n                    return;\n                }\n\n                const moviesList = res.Search.map(movie => movie.imdbID);\n                this.setState({\n                    moviesList\n                });\n            });\n    };\n\n    handleChange = event => {\n        this.setState({\n            searchTerm: event.target.value\n        });\n    };\n\n    render() {\n        const { moviesList } = this.state;\n\n        return (\n            <div>\n                <form onSubmit={this.search}>\n                    <input\n                        placeholder=\"Search for a movie\"\n                        onChange={this.handleChange}\n                    />\n                    <button type=\"submit\">\n                        <i className=\"fa fa-search\" />\n                    </button>\n                </form>\n                {moviesList.length > 0 ? (\n                    moviesList.map(movie => (\n                        <MovieCard movieID={movie} key={movie} />\n                    ))\n                ) : (\n                    <p>\n                        Couldn't find any movie. Please search again using\n                        another search criteria.\n                    </p>\n                )}\n            </div>\n        );\n    }\n}\n\nclass MovieCard extends React.Component {\n    state = {\n        movieData: {}\n    };\n\n    componentDidMount() {\n        axios\n            .get(\n                `https://www.omdbapi.com/?apikey=fa281222&i=${\n                    this.props.movieID\n                }&plot=full`\n            )\n            .then(res => res.data)\n            .then(res => {\n                this.setState({ movieData: res });\n            });\n    }\n\n    render() {\n        const {\n            Title,\n            Released,\n            Genre,\n            Plot,\n            Poster,\n            imdbRating\n        } = this.state.movieData;\n\n        if (!Poster || Poster === 'N/A') {\n            return null;\n        }\n\n        return (\n            <div className=\"movie-card-container\">\n                <div className=\"image-container\">\n                    <div\n                        className=\"bg-image\"\n                        style={{ backgroundImage: `url(${Poster})` }}\n                    />\n                </div>\n                <div className=\"movie-info\">\n                    <h2>Movie Details</h2>\n                    <div>\n                        <h1>{Title}</h1>\n                        <small>Released Date: {Released}</small>\n                    </div>\n                    <h4>Rating: {imdbRating} / 10</h4>\n                    <p>{Plot && Plot.substr(0, 350)}</p>\n                    <div className=\"tags-container\">\n                        {Genre && Genre.split(', ').map(g => <span>{g}</span>)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component {\n\t\n\trender(){\n\t\t\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navbar>\n                <Navbar.Brand><h4 id=\"head\">Movie Search App</h4></Navbar.Brand>\n  \t\t\t\t<Navbar.Toggle />\n  \t\t\t\t<Navbar.Collapse className=\"justify-content-end\">\n    \t\t\t<Navbar.Text>\n      \t\t\t<h4 id=\"sign-in\"><i class=\"fa fa-user\"></i> Sallabh Kumar  <i class=\"fa fa-caret-down\"></i></h4>\n    \t\t\t</Navbar.Text>\n \t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<MoviesList />\n\t\t<footer>\n\t\t<p>\n\t\tCreated by Sallabh\n\t\t</p>\n\t</footer>\t\t\t\t\t\n\t</div>\n\t\t)\n\t\t\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}